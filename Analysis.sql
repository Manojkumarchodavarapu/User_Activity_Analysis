CREATE TABLE users (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);

CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP DATETIME NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Users Table
INSERT INTO USERS VALUES (1, 'Alice', 'Active');
INSERT INTO USERS VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS  VALUES (4, 'David', 'Active');
INSERT INTO USERS  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS VALUES (10, 'Judy', 'Active');

SELECT * FROM USERS;

-- Logins Table 



INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);

INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);


-- 2024 Q1
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-03-15 16:00:00', 1015, 83);

INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2023-11-15 11:00:00', 1203, 80);




SELECT DISTINCT * FROM USERS;  /*USER_ID+USER_NAME*/

SELECT DISTINCT* FROM LOGINS; /*28*/


/*1. Which users did not log in during the past 5 months?*/
WITH USER_LAST_LOGIN AS
(
SELECT USER_ID, MAX(LOGIN_TIMESTAMP) AS LAST_LOGIN
FROM LOGINS
GROUP BY USER_ID
)
SELECT B.USER_NAME 
FROM 
USER_LAST_LOGIN A
LEFT JOIN 
USERS B
ON A.USER_ID = B.USER_ID
WHERE LAST_LOGIN<=DATE_ADD(CURRENT_DATE(), INTERVAL -5 MONTH);
/*2. How many users and sessions were there in each quarter, ordered from newest to oldest?*/
SELECT EXTRACT(QUARTER FROM LOGIN_TIMESTAMP) AS QTR,COUNT(DISTINCT USER_ID) AS USER_CNT,COUNT(DISTINCT SESSION_ID) AS SESSION_CNT
FROM 
LOGINS
GROUP BY EXTRACT(QUARTER FROM LOGIN_TIMESTAMP);

/*3. Which users logged in during January 2024 but did not log in during November 2023?*/
WITH NOV_LOG AS
(
SELECT DISTINCT USER_ID 
FROM 
LOGINS
WHERE EXTRACT(MONTH FROM LOGIN_TIMESTAMP) != 11 AND EXTRACT(YEAR FROM LOGIN_TIMESTAMP) != 2023
),
JAN_LOG AS
(
SELECT DISTINCT USER_ID
FROM 
LOGINS
WHERE EXTRACT(MONTH FROM LOGIN_TIMESTAMP) = 1 AND EXTRACT(YEAR FROM LOGIN_TIMESTAMP) = 2024
)
SELECT A.USER_ID,B.USER_NAME FROM 
JAN_LOG A
LEFT JOIN 
USERS B
ON A.USER_ID = B.USER_ID
WHERE 
A.USER_ID IN 
(SELECT USER_ID FROM NOV_LOG);

SELECT * FROM LOGINS;
/*4. What is the percentage change in sessions from the last quarter?*/
SELECT * FROM LOGINS;
WITH QTR_SUM AS
(
SELECT EXTRACT(QUARTER FROM LOGIN_TIMESTAMP) AS QTR,SUM(SESSION_SCORE) AS TOT_SCORE
FROM 
LOGINS
GROUP BY EXTRACT(QUARTER FROM LOGIN_TIMESTAMP)
)
SELECT *,LAG(TOT_SCORE) OVER(ORDER BY QTR),
CASE 
WHEN LAG(TOT_SCORE) OVER(ORDER BY QTR) IS NULL THEN NULL
ELSE ((TOT_SCORE-LAG(TOT_SCORE) OVER(ORDER BY QTR))/(LAG(TOT_SCORE) OVER(ORDER BY QTR)))*100
END AS PCT_INC
FROM 
QTR_SUM;
/*5. Which user had the highest session score each day?*/
WITH MAX_CTE AS
(
SELECT LOGIN_TIMESTAMP,MAX(SESSION_SCORE) AS MAXI
FROM 
LOGINS
GROUP BY 1
)
SELECT A.LOGIN_TIMESTAMP,
A.USER_ID,
A.SESSION_SCORE
FROM
LOGINS A
JOIN 
MAX_CTE B
ON 
A.LOGIN_TIMESTAMP = B.LOGIN_TIMESTAMP
AND 
A.SESSION_SCORE = B.MAXI;
/*6. Which users have had a session every single day since their first login?*/
SELECT USER_ID,DATEDIFF(CURRENT_DATE(),MIN(LOGIN_TIMESTAMP)),COUNT(SESSION_ID)
FROM 
LOGINS
GROUP BY 1
HAVING DATEDIFF(CURRENT_DATE(),MIN(LOGIN_TIMESTAMP)) = COUNT(SESSION_ID);
/*7. On what dates were there no logins at all?*/
/*Recursive CTE*/
WITH RECURSIVE DateRange AS (
    SELECT MIN(CAST(LOGIN_TIMESTAMP AS DATE)) AS date
    FROM logins
    UNION ALL
    SELECT DATE_ADD(date, INTERVAL 1 DAY)
    FROM DateRange
    WHERE DATE_ADD(date, INTERVAL 1 DAY) <= (SELECT MAX(CAST(LOGIN_TIMESTAMP AS DATE)) FROM logins)
),
LoginDates AS (
    SELECT DISTINCT CAST(LOGIN_TIMESTAMP AS DATE) AS login_date
    FROM logins
)
SELECT DateRange.date AS missing_date
FROM DateRange
LEFT JOIN LoginDates ON DateRange.date = LoginDates.login_date
WHERE LoginDates.login_date IS NULL;
